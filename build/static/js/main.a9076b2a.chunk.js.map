{"version":3,"sources":["contexts/LoggedIn.js","Navbar.js","FadeInSection.js","SqueezePage.js","RouteSwitch.js","App.js","serviceWorker.js","index.js"],"names":["LoggedInContext","createContext","LoggedInProvider","props","history","useHistory","useState","loggedIn","setLoggedIn","loading","setLoading","user","setUser","coverLetter","setCoverLetter","favoriteJobs","setFavoriteJobs","signUserIn","token","userData","path","undefined","Cookie","set","changeLogIn","changeUser","changeCoverLetter","jobs","NavigateTo","useEffect","jwt","get","a","config","method","url","headers","data","axios","console","log","fetchData","val","push","Provider","value","signUserOut","children","Navbar","useContext","className","to","src","alt","FadeInSection","isVisible","setVisible","domRef","React","useRef","useLayoutEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","current","unobserve","direction","ref","SqueezePage","email","setEmail","numberOfSignUps","setNumberOfSignUps","clickHandler","e","preventDefault","validator","isEmail","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","body","redirect","fetch","rawData","json","finalData","resetEmail","calculateSignUpSpotsLeft","length","num","width","height","title","frameborder","allow","allowfullscreen","style","color","type","class","id","aria-describedby","placeholder","onChange","target","onClick","RouteSwitch","exact","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4bAIaA,EAAkBC,0BAExB,SAASC,EAAiBC,GAC/B,IAAMC,EAAUC,cADsB,EAENC,oBAAS,GAFH,mBAE/BC,EAF+B,KAErBC,EAFqB,OAGRF,oBAAS,GAHD,mBAG/BG,EAH+B,KAGtBC,EAHsB,OAIdJ,mBAAS,IAJK,mBAI/BK,EAJ+B,KAIzBC,EAJyB,OAKAN,mBAAS,IALT,mBAK/BO,EAL+B,KAKlBC,EALkB,OAMER,mBAAS,IANX,mBAM/BS,EAN+B,KAMjBC,EANiB,KAQhCC,EAAa,SAACC,EAAOC,GAAgC,IAAtBC,EAAqB,4DAAdC,EAK1CC,IAAOC,IAAI,QAASL,GACpBM,GAAY,GACZC,EAAWN,EAASR,MACpBe,EAAkBP,EAASR,KAAKE,aAChCG,EAAgBG,EAASR,KAAKgB,MAC9BC,EAAWR,IAGbS,qBAAU,WACRnB,GAAW,GACX,IAAMoB,EAAMR,IAAOS,IAAI,SAwBnBD,EAtBW,uCAAG,gCAAAE,EAAA,sEAERC,EAAS,CACbC,OAAQ,OACRC,IAAK,kDACLC,QAAS,CACP,eAAgB,oBAElBC,KAAM,CACJnB,MAAOY,IATG,SAaSQ,IAAML,GAbf,gBAaNI,EAbM,EAaNA,KAERpB,EAAWa,EAAKO,GAChB3B,GAAW,GAhBG,kDAkBd6B,QAAQC,IAAR,MAlBc,0DAAH,oDAuBbC,GAEA/B,GAAW,KAEZ,IAEH,IAAMc,EAAc,SAACkB,GACnBlC,EAAYkC,IAgBRjB,EAAa,SAACiB,GAClB9B,EAAQ8B,IAGJhB,EAAoB,SAACgB,GACzB5B,EAAe4B,IAGXd,EAAa,SAACR,GAClBhB,EAAQuC,KAAKvB,IAGf,OACE,kBAACpB,EAAgB4C,SAAjB,CACEC,MAAO,CACLtC,WACAI,OACAE,cACAJ,UACAM,eACAD,eAAgBY,EAChBV,gBAAiBA,EACjBC,WAAYA,EACZ6B,YApCc,WAKlBxB,IAAOC,IAAI,QAAS,IACpBC,GAAY,GACZC,EAAW,IACXC,EAAkB,IAClBV,EAAgB,IAChBY,EAAW,QA6BRzB,EAAM4C,U,gBCnDEC,EA5CA,WAAO,IAAD,EACeC,qBAAWjD,GAD1B,EACXO,SADW,EACDuC,YAmBlB,OACE,yBAAKI,UAAU,iDACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAChC,yBAAKD,UAAU,OAAOE,IAAI,yBAAyBC,IAAI,Y,kHC5BhD,SAASC,EAAcnD,GAAQ,IAAD,EACXG,oBAAS,GADE,mBACpCiD,EADoC,KACzBC,EADyB,KAGrCC,EAASC,IAAMC,SAErBC,2BAAgB,WACd,IAAMC,EAAW,IAAIC,sBAAqB,SAACC,GACzCA,EAAQC,SAAQ,SAACC,GAAD,OAAWA,EAAMC,gBAAkBV,GAAW,SAKhE,OAFAK,EAASM,QAAQV,EAAOW,SAEjB,kBAAMP,EAASQ,UAAUZ,EAAOW,YACtC,IAbwC,IAenCE,EAAcnE,EAAdmE,UAER,OACE,yBACEC,IAAKd,EACLP,UAAS,0BAAqBoB,EAArB,YACPf,EAAY,aAAe,KAG5BpD,EAAM4C,U,WCoIEyB,EA1JK,WAAO,IAAD,EACElE,mBAAS,IADX,mBACjBmE,EADiB,KACVC,EADU,OAEsBpE,mBAAS,GAF/B,mBAEjBqE,EAFiB,KAEAC,EAFA,KAQlBC,EAAY,uCAAG,WAAOC,GAAP,uBAAA9C,EAAA,yDACnB8C,EAAEC,kBACEC,IAAUC,QAAQR,GAFH,wBAGXS,EAAY,IAAIC,SACZC,OAAO,eAAgB,oBAE3BC,EAAMC,KAAKC,UAAU,CAAEd,UAEvBe,EAAiB,CACrBtD,OAAQ,OACRE,QAAS8C,EACTO,KAAMJ,EACNK,SAAU,UAZK,SAeKC,MAAM,qCAE1BH,GAjBe,cAeXI,EAfW,iBAoBOA,EAAQC,OApBf,QAoBXC,EApBW,OAqBjBvD,QAAQC,IAAIsD,GACZC,IACAC,EAAyBF,EAAUG,QAvBlB,wBAyBjB1D,QAAQC,IAAI,eAzBK,4CAAH,sDA6BZuD,EAAa,WACjBrB,EAAS,KAGLsB,EAA2B,SAACE,GAEhCtB,EADgB,IAAMsB,IAIxB,OACE,yBAAKhD,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAeoB,UAAU,SACvB,yBAAKpB,UAAU,cACb,yBAAKE,IAAI,yCAIf,yBAAKF,UAAU,gBACb,kBAAC,EAAD,CAAeoB,UAAU,QACvB,4BACE6B,MAAM,MACNC,OAAO,MACPhD,IAAI,4CACJiD,MAAM,uBACNC,YAAY,IACZC,MAAM,2FACNC,iBAAe,OAMvB,yBAAKtD,UAAU,OACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAeoB,UAAU,SACvB,yBAAKpB,UAAU,eAAf,sFAEqB,0BAAMuD,MAAO,CAAEC,MAAO,QAAtB,UAErB,wBAAIxD,UAAU,gBACZ,6GAIA,mJAIA,2CACe,IACb,4BAAQuD,MAAO,CAAEC,MAAO,QAAxB,eAFF,qHASN,yBAAKxD,UAAU,gBACb,kBAAC,EAAD,CAAeoB,UAAU,QACvB,yBAAKpB,UAAU,cACb,yBAAKA,UAAU,UAAf,uBACA,iFACA,wBAAIA,UAAU,sBACZ,+DACA,oEACA,8FAIA,+FAKF,yBAAKA,UAAU,oBACb,+CACA,0BAAMA,UAAU,aAAayB,IAG/B,8BACE,yBAAKzB,UAAU,uBACb,yBAAKA,UAAU,SACb,2BACEyD,KAAK,QACLC,MAAM,eACNC,GAAG,kBACHC,mBAAiB,YACjBC,YAAY,yBACZlE,MAAO4B,EACPuC,SA7HD,SAAClC,GACpBJ,EAASI,EAAEmC,OAAOpE,WA+HF,yBAAKK,UAAU,SACb,4BACEA,UAAU,kBACVgE,QAASrC,GAFX,6BCtGPsC,EAzBK,WAAO,IACjB1G,EAAYwC,qBAAWjD,GAAvBS,QAER,OACE,oCACGA,EACC,yBAAKyC,UAAU,kBACb,yBAAKE,IAAI,+BAA+BC,IAAI,kBAG9C,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+D,OAAK,EAAChG,KAAK,IAAIiG,OAAQ,kBAAM,kBAAC,EAAD,aCVjCC,EARH,WACV,OACE,kBAACpH,EAAD,KACE,kBAAC,EAAD,QCGcqH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,a","file":"static/js/main.a9076b2a.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Cookie from 'js-cookie';\nimport axios from 'axios';\nexport const LoggedInContext = createContext();\n\nexport function LoggedInProvider(props) {\n  const history = useHistory();\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState({});\n  const [coverLetter, setCoverLetter] = useState('');\n  const [favoriteJobs, setFavoriteJobs] = useState([]);\n\n  const signUserIn = (token, userData, path = undefined) => {\n    // set token,\n    // set user data,\n    // navigate to home page.\n\n    Cookie.set('token', token);\n    changeLogIn(true);\n    changeUser(userData.user);\n    changeCoverLetter(userData.user.coverLetter);\n    setFavoriteJobs(userData.user.jobs);\n    NavigateTo(path);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    const jwt = Cookie.get('token');\n\n    const fetchData = async () => {\n      try {\n        const config = {\n          method: 'POST',\n          url: 'http://localhost:1337/api/v1/auth/sign-in/token',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          data: {\n            token: jwt,\n          },\n        };\n\n        const { data } = await axios(config);\n\n        signUserIn(jwt, data);\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (jwt) {\n      fetchData();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const changeLogIn = (val) => {\n    setLoggedIn(val);\n  };\n\n  const signUserOut = () => {\n    // un-set token,\n    // un-set user data,\n    // navigate to home page.\n\n    Cookie.set('token', '');\n    changeLogIn(false);\n    changeUser('');\n    changeCoverLetter('');\n    setFavoriteJobs([]);\n    NavigateTo('/');\n  };\n\n  const changeUser = (val) => {\n    setUser(val);\n  };\n\n  const changeCoverLetter = (val) => {\n    setCoverLetter(val);\n  };\n\n  const NavigateTo = (path) => {\n    history.push(path);\n  };\n\n  return (\n    <LoggedInContext.Provider\n      value={{\n        loggedIn,\n        user,\n        coverLetter,\n        loading,\n        favoriteJobs,\n        setCoverLetter: changeCoverLetter,\n        setFavoriteJobs: setFavoriteJobs,\n        signUserIn: signUserIn,\n        signUserOut: signUserOut,\n      }}\n    >\n      {props.children}\n    </LoggedInContext.Provider>\n  );\n}\n","import React, { useContext } from 'react';\nimport { LoggedInContext } from './contexts/LoggedIn';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './Navbar.css';\n\nimport './App.css';\n\nconst Navbar = () => {\n  const { loggedIn, signUserOut } = useContext(LoggedInContext);\n\n  const handleLogoutClick = async () => {\n    try {\n      const config = {\n        method: 'GET',\n        url: 'http://localhost:1337/api/v1/auth/logout',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      const { data } = await axios(config);\n      console.log(data);\n      signUserOut();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        <img className=\"logo\" src=\"/Ninja-9to5_logo_H.png\" alt=\"logo\" />\n      </Link>\n\n      {/* <div className=\"d-flex justify-content-end ml-auto\">\n        {loggedIn ? (\n          <>\n            <Link to=\"/profile\" className=\"align-self-center mr-3\">\n              Profile\n            </Link>\n            <button onClick={handleLogoutClick} className=\"btn btn-danger\">\n              Log Out\n            </button>{' '}\n          </>\n        ) : (\n          <Link to=\"/signin\">Sign In</Link>\n        )}\n      </div> */}\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useLayoutEffect } from 'react';\nimport './FadeInSection.css';\n\nexport default function FadeInSection(props) {\n  const [isVisible, setVisible] = useState(false);\n\n  const domRef = React.useRef();\n\n  useLayoutEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => entry.isIntersecting && setVisible(true));\n    });\n\n    observer.observe(domRef.current);\n\n    return () => observer.unobserve(domRef.current);\n  }, []);\n\n  const { direction } = props;\n\n  return (\n    <div\n      ref={domRef}\n      className={`fade-in-section ${direction} ${\n        isVisible ? 'is-visible' : ''\n      }`}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport FadeInSection from './FadeInSection';\nimport validator from 'validator';\nimport './SqueezePage.css';\n\nconst SqueezePage = () => {\n  const [email, setEmail] = useState('');\n  const [numberOfSignUps, setNumberOfSignUps] = useState(0);\n\n  const emailHandler = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const clickHandler = async (e) => {\n    e.preventDefault();\n    if (validator.isEmail(email)) {\n      const myHeaders = new Headers();\n      myHeaders.append('Content-Type', 'application/json');\n\n      const raw = JSON.stringify({ email });\n\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow',\n      };\n\n      const rawData = await fetch(\n        `http://localhost:1337/api/v1/email`,\n        requestOptions\n      );\n\n      const finalData = await rawData.json();\n      console.log(finalData);\n      resetEmail();\n      calculateSignUpSpotsLeft(finalData.length);\n    } else {\n      console.log('Not working');\n    }\n  };\n\n  const resetEmail = () => {\n    setEmail('');\n  };\n\n  const calculateSignUpSpotsLeft = (num) => {\n    let spotsLeft = 100 - num;\n    setNumberOfSignUps(spotsLeft);\n  };\n\n  return (\n    <div className=\"SqueezePage\">\n      <div className=\"container\">\n        <div className=\"row mb-5\">\n          <div className=\"col-sm-6 p-3\">\n            <FadeInSection direction=\"right\">\n              <div className=\"ninja-logo\">\n                <img src=\"/Ninja-9to5_logo_Stacked copy.png\" />\n              </div>\n            </FadeInSection>\n          </div>\n          <div className=\"col-sm-6 p-3\">\n            <FadeInSection direction=\"left\">\n              <iframe\n                width=\"560\"\n                height=\"315\"\n                src=\"https://www.youtube.com/embed/aI7jRGMGzEU\"\n                title=\"YouTube video player\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n              ></iframe>\n            </FadeInSection>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-6 ninja-text\">\n            <FadeInSection direction=\"right\">\n              <div className=\"header-text\">\n                The only site built by a coder to help other coders go from job\n                seeking to hired - <span style={{ color: 'red' }}>FAST!</span>\n              </div>\n              <ul className=\"feature-list\">\n                <li>\n                  Search multiple job sites like Ziprecruiter, Monster, and\n                  Indeed all at once!\n                </li>\n                <li>\n                  Create cover letter templates that generate a new cover letter\n                  for every job you're interested in to save you time.\n                </li>\n                <li>\n                  9to5Ninja is{' '}\n                  <strong style={{ color: 'red' }}>invite only</strong>! This is\n                  a private tool to help our ninjas cut through job market\n                  competition, and only the worthy may enter!\n                </li>\n              </ul>\n            </FadeInSection>\n          </div>\n          <div className=\"col-sm-6 p-3\">\n            <FadeInSection direction=\"left\">\n              <div className=\"newsletter\">\n                <div className=\"header\">Join Our Newsletter</div>\n                <p>The first 100 newsletter susbcribers will receive:</p>\n                <ul className=\"newsletter-bullets\">\n                  <li>An invitation to join 9to5Ninja</li>\n                  <li>Information on when the site is live</li>\n                  <li>\n                    Curated content for how to ace your interviews and get the\n                    job\n                  </li>\n                  <li>\n                    Random coding challenges to keep your mind sharp like a\n                    katana\n                  </li>\n                </ul>\n                <div className=\"number-container\">\n                  <strong>Spots Left:</strong>\n                  <span className=\"big-money\">{numberOfSignUps}</span>\n                </div>\n\n                <form>\n                  <div className=\"form-group row px-3\">\n                    <div className=\"col-8\">\n                      <input\n                        type=\"email\"\n                        class=\"form-control\"\n                        id=\"newsletterEmail\"\n                        aria-describedby=\"emailHelp\"\n                        placeholder=\"kakashi@hiddenleaf.com\"\n                        value={email}\n                        onChange={emailHandler}\n                      />\n                    </div>\n                    <div className=\"col-4\">\n                      <button\n                        className=\"btn btn-primary\"\n                        onClick={clickHandler}\n                      >\n                        Join Newsletter\n                      </button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </FadeInSection>\n          </div>\n        </div>\n      </div>\n      {/* <div className=\"ninja-logo\">\n        <img src=\"/Ninja-9to5_logo_Stacked copy.png\" />\n      </div> */}\n    </div>\n  );\n};\n\nexport default SqueezePage;\n","import React, { useContext } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { LoggedInContext } from './contexts/LoggedIn';\nimport Navbar from './Navbar';\nimport FriendCodeContainer from './FriendCodeContainer';\nimport Search from './Search';\nimport SignIn from './SignIn';\nimport Profile from './Profile';\nimport SqueezePage from './SqueezePage';\nimport './App.css';\n\nconst RouteSwitch = () => {\n  const { loading } = useContext(LoggedInContext);\n\n  return (\n    <>\n      {loading ? (\n        <div className=\"loading-screen\">\n          <img src=\"/Ninja-9to5_logo_Stacked.png\" alt=\"Logo Stacked\" />\n        </div>\n      ) : (\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" render={() => <SqueezePage />} />\n            {/* <Route exact path=\"/signin\" render={() => <SignIn />} />\n            <Route exact path=\"/profile\" render={() => <Profile />} />\n            <Route exact path=\"/squeeze\" render={() => <SqueezePage />} /> */}\n          </Switch>\n          {/* <FriendCodeContainer /> */}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default RouteSwitch;\n","import React from 'react';\nimport { LoggedInProvider } from './contexts/LoggedIn';\nimport RouteSwitch from './RouteSwitch';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <LoggedInProvider>\n      <RouteSwitch />\n    </LoggedInProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}